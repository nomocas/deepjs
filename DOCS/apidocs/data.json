{
    "project": {
        "name": "deepjs API",
        "description": "The deepjs API: where tree, branch, layer, landscape, colliders, (mutable) chaines and promises merge. For better programming...",
        "version": "1.0.rc",
        "url": "http://www.deepjs.net"
    },
    "files": {
        "testcases/app.js": {
            "name": "testcases/app.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "deep-collider.js": {
            "name": "deep-collider.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "deep-compose.js": {
            "name": "deep-compose.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "deep-query.js": {
            "name": "deep-query.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "deep-request.js": {
            "name": "deep-request.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "deep-restart.js": {
            "name": "deep-restart.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "deep-rql.js": {
            "name": "deep-rql.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "deep-schema.js": {
            "name": "deep-schema.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "deep.js": {
            "name": "deep.js",
            "modules": {
                "deep": 1
            },
            "classes": {
                "DeepHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "promise.js": {
            "name": "promise.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "utils.js": {
            "name": "utils.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "deep": {
            "name": "deep",
            "submodules": {},
            "classes": {
                "DeepHandler": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "deep.js",
            "line": 317,
            "description": "deep : just say : Powaaaaaa ;)"
        }
    },
    "classes": {
        "DeepHandler": {
            "name": "DeepHandler",
            "shortname": "DeepHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "deep",
            "namespace": "",
            "file": "deep.js",
            "line": 317,
            "description": "Deep Chain Handler  : manage asynch and synch in one chain",
            "is_constructor": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "[description]",
                    "type": "Object"
                },
                {
                    "name": "schema",
                    "description": "[description]",
                    "type": "Object"
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "testcases/app.js",
            "line": 1,
            "author": "Gilles Coomans <gilles.coomans@gmail.com>",
            "class": "DeepHandler"
        },
        {
            "file": "deep-collider.js",
            "line": 1,
            "author": "Gilles Coomans <gilles.coomans@gmail.com>",
            "class": "DeepHandler"
        },
        {
            "file": "deep-compose.js",
            "line": 1,
            "author": "Gilles Coomans <gilles.coomans@gmail.com>",
            "class": "DeepHandler"
        },
        {
            "file": "deep-query.js",
            "line": 1,
            "author": "Gilles Coomans <gilles.coomans@gmail.com>\n\nsee Docs/deep-query.md   for full documentations\n\nA other proposal for (json/object)-query which (as differences from official proposal):\nuse simple slash delimitted syntax, \ncould handle regular expression for step selection, \ncould handle rql (for filtering) on each step selection,\ncould be relative to where the query are placed in a object/json\nso could handle a step toward any ancestor\ncould handle json-schema in rql filtering\ncould handle ancestor in rql filtering\n\nqueries: \n/?foo=2&bar/myArray.*?length=gt=10/[1:4:2,@.length-2]//(^p.*)g?=in=(hello,bye)&_parent.taxerate=lt=0.12&_schema.type=string\n../foo/bar?zoo.name//price?=in=(12,55)\n/foo/bar/\n//(p.+)gi/../../foo//bar?=3\n\nEach move could be composed of \n\n[''|'.'|'..'|'...'] ['/'|'//']\n\nAny selector could be :\n!\t\t\t\tcurrent\nempty | *\t\tany childs  (obviously not in ../../ (there is no selectors between : just up moves))\nstring (precise)\tparticular child\n(regExp without /)[gi]\treg exp matching\n[array of selectors]   (will give the union of all selectors)\n\nAny filter could be a (deep)RQL query",
            "class": "DeepHandler"
        },
        {
            "file": "deep-request.js",
            "line": 1,
            "author": "Gilles Coomans <gilles.coomans@gmail.com>\nDeepRequest : a set of useful function to retreieve ressources",
            "class": "DeepHandler"
        },
        {
            "file": "deep-request.js",
            "line": 5,
            "description": "TODO : DeepRequest.late.post(...) : return function which will do post later\n\ncrossDomainXML : add options with proxy or YQL\n\nmaintain cache for each reload seqquence : if in the same load bunch there is sam paths : use cache in place of retreieve multiple time the same file\n\nprotocole to add : \n\ndata-model::\nfs::\n\n\n\n\nprotocoles :\n\nextensions : \n\nparsers : \n\nresponseParser\n\tread reponse.headers.contentType : \n\t\nvar jqueryRequest = function(info, options){\n\toptions = options || {};\n\tvar headers = options.headers || {};\n\tutils.up(this.requestHeaders, headers);\n\tvar self = this;\n\treturn promise.when($.ajax({\n\t\tbeforeSend :function(req) {\n\t\t\twriteJQueryHeaders(req, headers);\n\t\t},\n\t\turl:info.uri, \n\t\tmethod:\"GET\", \n\t\tdata:null,\n\t\tdatatype:self.options.datatype || \"json\"\n\t})\n\t.done(function (  data, msg, jqXHR ) {\n\t\treturn self.parse(data, info, options);\n\t})\n\t.fail(function ( jqXHR ) {\n\t\treturn new Error(\"DeepRequest.load failed : \"+JSON.stringify(info));\n\t}))\n}\nvar setHeaders = function (req) {\n\t\n}\n\nvar deepAction = {\n\t\"dom.appendTo\" : { // dom.appendTo::#id\n\t\taction:function (info, datas) {\n\t\t\t// body...\n\t\t}\n\t}\n}\n\nvar vc = {\n\tplaceInDOM:deep.action(\"dom.appendTo::#id\")\n}\nvar dr = {\n\tlexic:{\n\t\tjson:{\n\t\t\toptions:{\n\t\t\t\tqueriable:true,\n\t\t\t\tdatatype:\"json\"\n\t\t\t},\n\t\t\trequestHeaders:{\n\t\t\t\t\"accept\":\"application/json;charset=utf-8\"\n\t\t\t},\n\t\t\tresponseHeaders:{\n\t\t\t\t\"content-type\":\"application/json;charset=utf-8\"\n\t\t\t},\n\t\t\taction:baseRequest,\n\t\t\tparse:function(response, infos, options) {\n\t\t\t\t// body...\n\t\t\t}\n\t\t},\n\t\thtml:{\n\t\t\toptions:{\n\t\t\t\tqueriable:false,\n\t\t\t\tdatatype:\"html\"\n\t\t\t},\n\t\t\trequestHeaders:{\n\t\t\t\t\"accept\":\"text/html;charset=utf-8\"\n\t\t\t},\n\t\t\tresponseHeaders:{\n\t\t\t\t\"content-type\":\"text/html;charset=utf-8\"\n\t\t\t},\n\t\t\taction:baseRequest,\n\t\t\tparse:function(response, infos, options) {\n\t\t\t\t// body...\n\t\t\t}\n\t\t}\n\t},\n\tget:function (info, options) {\n\t\tif(typeof info === 'string')\n\t\t\tinfo = this.parse(info);\n\t\tvar handler = this.lexic[info.protocole];\n\t\tif(!handler)\n\t\t\tthrow new Error(\"DeepRequest : no handler found with : \",info); \n\t\treturn handler.action(info, options);\n\t}\n\tall\n\t_______\n\n\tjson\n\txml\n\trss\n\ttext\n\thtml\n\n}",
            "class": "DeepHandler"
        },
        {
            "file": "deep-restart.js",
            "line": 352,
            "description": "select login controller : give controller chain",
            "class": "DeepHandler"
        },
        {
            "file": "deep-restart.js",
            "line": 388,
            "description": "Permit to manipulate server store through restful IO...",
            "class": "DeepHandler"
        },
        {
            "file": "deep-restart.js",
            "line": 395,
            "description": "Do post on login services.\n\t\tIf arg is provided : post arg as login object.\n\t\tIf no args : use from ui if possible",
            "class": "DeepHandler"
        },
        {
            "file": "deep-restart.js",
            "line": 406,
            "description": "get object from store",
            "class": "DeepHandler"
        },
        {
            "file": "deep-rql.js",
            "line": 14,
            "description": "TODO : \nadd distinct(testPropertyPath)\nadd merge()\nadd backgrounds()  :  do object extension with deep-extender + schema\n\n\n\nadd _ancestor (any ancestor)\nadd _brothers  (any brothers)\n\n! TEST ALL operations !",
            "class": "DeepHandler"
        },
        {
            "file": "deep-schema.js",
            "line": 1,
            "author": "gilles.coomans@gmail.com\nJSON-Schema validator : based on json-schema draft 02, 03, and 04 + extensions\n \thttp://tools.ietf.org/html/draft-zyp-json-schema-03\n \n\n\tAjout par rapport à la v3\n\n\n\ttype:\n\t\tschema\n\t\tfalse\n\t\ttrue\n\t\tfunction\n\t\tdate\n\t\thash     !!!!!     différent de object ou array == TROISIEME TYPE non simple : hash table d'items\n\n\tnotNull\n\n\tabsoluteMinimum\n\tabsoluteMaximum\n\n\tmerge\n\tloadable\n\t\"interpretation-deepness\"   ==> have equivalent in draft 4 : template : bad word : template-engine is better or href-interpreter (because it's the only interpretable string)\n\n\n\tdeprecated : \n\t$ref : to be removed : incoherent with backgrounds\n\n\n\tsemantic misuse :\n\tid has to became uri\n\n\n\tv3 / V4\n\tpattern remplace format ?\n\tdivisibleBy -> mod\n\tmax/minProperties\n\n\trequired : fuzzy concept now : need \n\tdependencies : always fuzzy : need example to be clear\n\n\tI propose : \n\n\t{\n\t\tmyConstraintProperty:{\n\t\t\trequired:Boolean,   // means that's, in any case, this property is needed\n\t\t\trequire:{\n\t\t\t\t// is the schema that the whole object (from root) need to satisfy\n\t\t\t\tpath:{\n\t\t\t\t\tto:{\n\t\t\t\t\t\trequiredProperty:{\n\t\t\t\t\t\t\t// schema that requiredProperty need to satisfy\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tFuzzy : format/pattern/value :    value is more clear : \n\tI propose : \n\t\twhen object.value is a leaf of the object instance (no array, nor object):\n\t\tif(schema.value is RegExp)\n\t\t\tobject.value must match schema.value (equivalent of pattern)\n\t\telse\n\t\t\tobject.value must be equal to schema.value\n\t\t\t\n\tthat permit to be a mecanisme for true or false constraint value (no more \"true\" or \"false\" type)\n\tthat also permit to be a constraint on the object.value for any dependencies :\n\n\tso : \n\ttaxerate:{\n\t\trequired:true,\n\t\tdependencies:[\n\t\t\t{ \n\t\t\t\tconstraint:{\n\t\t\t\t\t// the schema that need to be matched on the dependant value\n\t\t\t\t\tpattern:\"tva-pattern-uk\"\n\t\t\t\t}, \n\t\t\t\tinstance:{\n\t\t\t\t\t// the schemas that pointed properties (from root) need to satisfy to evaluate \n\t\t\t\t\tpath:{\n\t\t\t\t\t\tto:{\n\t\t\t\t\t\t\tcountry:{\n\t\t\t\t\t\t\t\tpattern:\"UK\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{ \n\t\t\t\tconstraint:{\n\t\t\t\t\t// the schema that need to be matched on the dependant value\n\t\t\t\t\tpattern:\"tva-pattern-eu\"\n\t\t\t\t}, \n\t\t\t\tinstance:{\n\t\t\t\t\t// the schema that pointed properties (from root) need to satisfy to evaluate \n\t\t\t\t\tproperties:{\n\t\t\t\t\t\tpathTo:{\n\t\t\t\t\t\t\tproperties:{\n\t\t\t\t\t\t\t\tcountry:{\n\t\t\t\t\t\t\t\t\tenum:[\"SE\",\"FR\",\"ES\"]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n\n\n\tWith json-pointer :\n\ttaxerate:{\n\t\trequired:true,\n\t\tdependencies:[\n\t\t\t{ \n\t\t\t\tconstraint:{  // the schema that need to be matched on the dependant value. Optional : empty schema by default\n\t\t\t\t\tpattern:\"tva-pattern-uk\"\n\t\t\t\t}, \n\t\t\t\ttest:{\n\t\t\t\t\t// the schemas that pointed property (from root - in object instance) need to be satisfied to evaluate constraint above\n\t\t\t\t\t\"#/address/country\":{\n\t\t\t\t\t\tpattern:\"UK\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{ \n\t\t\t\tconstraint:{\n\t\t\t\t\t// the schema that need to be matched on the dependant value\n\t\t\t\t\tpattern:\"tva-pattern-eu\"\n\t\t\t\t}, \n\t\t\t\ttest:{\n\t\t\t\t\t// the schema that whole object (from root) needs to be satisfied to evaluate constraint above\n\t\t\t\t\t\"#/address/country\":{ \n\t\t\t\t\t\tenum:[\"FR\", \"ES\"]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n\n\tthe order of evaluation is done up-bottom, and the first dependecy that match the test will test his constraint on the value.\n\tOnly the first is interpreted.\n\n\tif there is \n\n\n\tDonc : SI l'instance satisfait tels schema : ALORS la valeur dépendante doit satisfaire tels contraintes\n\n\tmanque mécanisme de référence interne : \n\n\tgenre : \n\n\tmySchema:{\n\t\tobj:{\n\t\t\tobj2:{\n\t\t\t\t\"$ref\": \"/\"\n\t\t\t}\n\t\t}\n\t}\n\n\t==> utiliser backgrounds + json-pointer\n\n\t{\n\t\tproperties:{\n\t\t\tmyNestedChilds:{\n\t\t\t\tpatternProperties:{\n\t\t\t\t\t/.* /g:{\n\t\t\t\t\t\tbackgrounds:[\"#/\"],   // TOdo faire attention dans l'backgrounds d'un ancêtre : cycle possible : faut que l'extension ne cycle pas mais que la structure soit bien nesté à l'infini : solution faire l'backgrounds le plus tard possible : ne pas extender toute la structure dés le début\n\t\t\t\t\t\tproperties:{ \n\t\t\t\t\t\t\tparent:{ type:\"any\" } \n\t\t\t\t\t\t} \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\n\tsinon : addionnal items n'a de sens que si items est une array.\n\n\n\n\tREFACTORING EXTENDS\n\tbackgrounds dans deep-schema : faire un mix : \n\tprécompilation du schéma : dés qu'on voit qu'on doit choper un ancetre pour un backgrounds (dans le schema) : on laisse l'backgrounds  (on remplace dans l'array backgrounds tout ce qui peut etre compilé par sa compilation (par groupe en laissant l'ordre et les référence vers anc^etres tel quel - tout ce qui est en dessous de la première référence à un parent peut déjà être appliqué))\n\tlorsqu'on a une instance : lors du parsing/compilation (au deep-copy par exemple, lorsqu'on voit passer tous les champs) : \n\t\ton chope le schema associé à la propriété courante\n\t\t\tsi backgrounds encore présent dans schema : copier ancetre dans vide, (sans backgrounds), coller schema prop courante dessus (sans backgrounds) : retourner le tout\n\n\tsi backgrounds vers ancetres dans instance : throw : error : cycle present ! structure infinie\n\n\n\n\tbackgrounds et foregrounds : \n\t\tne pas les mettre dans l'instance : ca devient difficile à gérer : les mettre dans le schema : la c'est cohérent\n \n \t\tau final : comme un schema chope de plus en plus de propriétés d'un deep-factory : il faudrait que le schema soit un deep-factory \n \t\tdont son propre schema soit le meta schema du schema",
            "class": "DeepHandler"
        },
        {
            "file": "deep-schema.js",
            "line": 206,
            "description": "TODO : \njson-pointer dereferencement\t\t\t\t\t\t\tOK\nadd relative reference to json-pointer\t\t\t\t\tOK\ndependencies : clarify, and/or implement if(constraint.match(root)) constraint(value)\nlinks dereferencer  : template-engine + instance injection + DeepRequest.retrieve\nréférencement interne : backgrounds ou $ref with json-pointer\t\t\t\t\tOK\n\n\n\nPatterns :\n\t- name patterns + data : regExp, enum, direct       (could be external)\n\t- query pattern : if query then pattern match\n\n\tproperties:{\n\t\tchristophil:{\n\t\t\tdependenciesQueries:\n\t\t\t{\n\t\t\t\tmatchEurope:{     // it's the relation/dependency name\n\t\t\t\t\tquery:\"\",\n\t\t\t\t\trequired:true,   // mean that the query MUST give something : so the dependency MUST be valid\n\t\t\t\t\tpatternProperties:{\n\t\t\t\t\t\t\"$ref\":[ \"json::/Pathologies/?type=perenial&zone=europe&$result=hash\" ]  // exemple of external patterns definitions\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmatchUK:{\n\t\t\t\t\tquery:\"\";\n\t\t\t\t\trequired:false,  // optional dependency\n\t\t\t\t\tproperties:{\n\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\nproperty name + data pattern : could be an external link to a service that provides a list of acceptable values.\nImagine you would define a pathologie list for plants. Each plant could be sensible to a subset of those pathologies, and could have different kinds of sensibility...\nThe service could provids the list of known pathologies, and the subset have to match",
            "class": "DeepHandler"
        },
        {
            "file": "deep-schema.js",
            "line": 251,
            "description": "console.flags : {\n\tvalidationError,\n\tvalidator\n}",
            "class": "DeepHandler"
        },
        {
            "file": "deep.js",
            "line": 2,
            "author": "Gilles Coomans <gilles.coomans@gmail.com>",
            "class": "DeepHandler"
        },
        {
            "file": "deep.js",
            "line": 349,
            "description": "allow to create chain branches \n\nsynch\ntransparent : not relevant",
            "itemtype": "method",
            "name": "brancher",
            "return": {
                "description": "brancher function"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 374,
            "description": "reverse entries order\n\nasynch\ninject entries values as chain success.",
            "itemtype": "method",
            "name": "reverse",
            "return": {
                "description": "this",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 394,
            "description": "catch any throwned error while chain running\n\nasycnh\ntransparent true",
            "itemtype": "method",
            "name": "catchError",
            "params": [
                {
                    "name": "catchIt",
                    "description": "if true : catch all future chain error. (true by default)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 419,
            "description": "cancel chain. \n\nend of chain\nsynch",
            "itemtype": "method",
            "name": "cancel",
            "params": [
                {
                    "name": "reason",
                    "description": "the reason of the chain cancelation (any string or object)"
                }
            ],
            "return": {
                "description": "nothing"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 439,
            "description": "reject chain. \n\nend of chain\nsynch",
            "itemtype": "method",
            "name": "reject",
            "params": [
                {
                    "name": "reason",
                    "description": "the reason of the chain cancelation (any string or object)",
                    "type": "*"
                }
            ],
            "return": {
                "description": "nothing"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 460,
            "description": "asynch handler for chain branches creation\n\ntransparent false",
            "itemtype": "method",
            "name": "branches",
            "params": [
                {
                    "name": "func",
                    "description": "the callback that will receive the brancher (see above)",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 490,
            "description": "wait promise resolution or rejection before continuing chain\n\n\tasynch\n\ttransparent false",
            "itemtype": "method",
            "name": "when",
            "params": [
                {
                    "name": "prom",
                    "description": "the promise to waiting for",
                    "type": "Promise"
                }
            ],
            "return": {
                "description": "",
                "type": "Deephandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 520,
            "description": "handle previous chain's handle success\n\nthe callback receive 3 arguments : \n\t\tsuccess, handler, brancher\n\nthe success is the success object produced by previous chain's handle\nthe handler is the chain handle itself\nthe brancher is the brancher function that create clone of the chain to produce chain branches\n\n\tasynch",
            "itemtype": "method",
            "name": "done",
            "params": [
                {
                    "name": "callback",
                    "description": "the calback function to handle success"
                }
            ],
            "return": {
                "description": "Deephandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 572,
            "description": "handle previous chain handle error\n\nthe callback receive 3 arguments : \n\t\terror, handler, brancher\n\nthe error is the success object produced by previous chain's handle\nthe handler is the chain handle itself\nthe brancher is the brancher function that create clone of the chain to produce chain branches\n\n\tasynch",
            "itemtype": "method",
            "name": "fail",
            "params": [
                {
                    "name": "callback",
                    "description": "the calback function to handle error"
                }
            ],
            "return": {
                "description": "Deephandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 619,
            "description": "handle previous chain handle success and error\n\n\tadd a .done and a .fail (orderedly) in chain with callbacks.",
            "itemtype": "method",
            "name": "then",
            "params": [
                {
                    "name": "successCallBack",
                    "description": "the calback function to handle success"
                },
                {
                    "name": "errorCallBack",
                    "description": "the calback function to handle error"
                }
            ],
            "return": {
                "description": "this",
                "type": "Deephandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 638,
            "description": "perform a range on chain entries : so will remove any chain entries of of range index.\n\n\tasynch\n\n\n inject a rangeObject as chain success : \n \t{\n \t\tstart:number,\n \t\tend:number,\n \t\ttotal:number,\n \t\tresults:Array,\n \t\thasNext:boolean,\n \t\thasPrevious:boolean\n \t}",
            "itemtype": "method",
            "name": "range",
            "params": [
                {
                    "name": "start",
                    "description": "the index of range start"
                },
                {
                    "name": "end",
                    "description": "the index of range end"
                }
            ],
            "return": {
                "description": "this",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 673,
            "description": "save current chain position. it means that it will save\n\t- current entries \n\t- current success and errors\n\t- current store (if any) in private queue before continuing.\n\n\tasynch\n\ttransparent true",
            "itemtype": "method",
            "name": "position",
            "params": [
                {
                    "name": "name",
                    "description": "the name of position (its id/label)"
                },
                {
                    "name": "options",
                    "description": "optional object (no options for the moment)"
                }
            ],
            "return": {
                "description": "this",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 698,
            "description": "go back to a previously saved position (see .position).\nIf no name is provided : go back to last position (if any)\n\nthrow an error if no position founded.\n\ninject chain values as chain success",
            "itemtype": "method",
            "name": "back",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the last position asked"
                },
                {
                    "name": "options",
                    "description": "(optional - no options for the moment)"
                }
            ],
            "return": {
                "description": "",
                "type": "[type]"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 743,
            "description": "keep only the first chain entries. remove all others\n\nasynch\ninject selected entry value as chain success",
            "itemtype": "method",
            "name": "first",
            "return": {
                "description": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 763,
            "description": "keep only the last chain entries. remove all others\n\nasynch\ninject selected entry value as chain success",
            "itemtype": "method",
            "name": "last",
            "return": {
                "description": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 783,
            "description": "take current entries parents (if any) as new entries.\n\ninject new entries values as chain success.\n\nasynch",
            "itemtype": "method",
            "name": "parents",
            "params": [
                {
                    "name": "boolean",
                    "description": "errorIfEmpty : if true and no parents was selected : throw an error"
                }
            ],
            "return": {
                "description": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 812,
            "description": "take object, shcema, options and create fresh chain entries from it. Same mecanism as new chain.",
            "itemtype": "method",
            "name": "root",
            "params": [
                {
                    "name": "object",
                    "description": "the object to produce entries  (could be a retrievable string - e.g. \"json::myobject.json\" - see retrievable doc)"
                },
                {
                    "name": "schema",
                    "description": "the schema of the object  (could be a retrievable string - e.g. \"json::myobject.json\" - see retrievable doc)"
                }
            ],
            "return": {
                "description": "[DeepHandler] this"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 835,
            "description": "Apply the query on EACH chain entries and concatened all the results to form new chain entries.\n\n\ninject queried results as chain success",
            "itemtype": "method",
            "name": "query",
            "params": [
                {
                    "name": "q",
                    "description": "the deep-query. Could be an ARRAY of Queries : the result will be the concatenation of all queries on all entries",
                    "type": "String"
                },
                {
                    "name": "errorIfEmpty",
                    "description": ": if true : throw an error if query return nothing",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "this (chain handler)",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 870,
            "description": "same as .query : but in place of holding queried entries : it return directly the query results.\nIs the synch version of the query handle.\n\nsynch true\ntransparent false",
            "itemtype": "method",
            "name": "select",
            "params": [
                {
                    "name": "q",
                    "description": "the deep-query. Could be an ARRAY of Queries : the result will be the concatenation of all queries on all entries",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 895,
            "description": "set schema of all entries (purely assignation)\ninject entries shemas as chain success",
            "itemtype": "method",
            "name": "schema",
            "params": [
                {
                    "name": "schema",
                    "description": "could be a retrievable string (e.g. \"json::myschema.json\" - see retrievable doc)",
                    "type": "String|object"
                }
            ],
            "return": {
                "description": "this (chain handler)",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 925,
            "description": "apply provided schema on all entries schemas (.up application)\ninject entries shemas as chain success",
            "itemtype": "method",
            "name": "schemaUp",
            "params": [
                {
                    "name": "schema",
                    "description": "could be a retrievable string (e.g. \"json::myschema.json\" - see retrievable doc)",
                    "type": "String|object"
                }
            ],
            "return": {
                "description": "this (chain handler)",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 962,
            "description": "apply provided schema on all entries schemas (.bottom application)\n\ninject entries shemas as chain success",
            "itemtype": "method",
            "name": "schemaBottom",
            "params": [
                {
                    "name": "schema",
                    "description": "could be a retrievable string (e.g. \"json::myschema.json\" - see retrievable doc)",
                    "type": "String|object"
                }
            ],
            "return": {
                "description": "this (chain handler)",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 1003,
            "description": "set entries properties by path.\n\nsynch\ninject setted values as chain success",
            "itemtype": "method",
            "name": "setByPath",
            "params": [
                {
                    "name": "path",
                    "description": "a slash delimitted path (e.g. \"/my/property\")",
                    "type": "String"
                },
                {
                    "name": "obj",
                    "description": "the value to assign (could be a retrievable strings)",
                    "type": "Object|primitive"
                }
            ],
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 1034,
            "description": "apply arguments from UP on each entries : will merge objects and array together DEEPLY. see docs and examples.\n\nsynch\ninject entries values as chain success.",
            "itemtype": "method",
            "name": "up",
            "params": [
                {
                    "name": "objects",
                    "description": "a list (coma separated - not an array) of objects to apply on each chain entries"
                }
            ],
            "return": {
                "description": "this",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 1068,
            "description": "apply arguments from BOTTOM on each entries : will merge objects and array together DEEPLY. see docs and examples.\n\n synch\n inject entries values as chain success.",
            "itemtype": "method",
            "name": "bottom",
            "params": [
                {
                    "name": "objects",
                    "description": "a list (coma separated - not an array) of objects to apply on each chain entries"
                }
            ],
            "return": {
                "description": "this",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 1102,
            "description": "synch\n \n replace queried entries properties by new value and inject replaced properties as chain success.",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "what",
                    "description": "a query to select properties to replace",
                    "type": "String"
                },
                {
                    "name": "by",
                    "description": "any value to assign (could be a retrievable string)",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "(optional) : it is the options object for the deep.get which will eventually retrieve the 'by' object (see deep.get)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 1139,
            "description": "synch\n \n remove queried properties from entries and inject removed properties as chain success.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "what",
                    "description": "a query to select properties to replace",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 1174,
            "description": "will perform the backgrounds application on any backgrounds properties at any level\n\n\tnot intend to be call directly by programmer. use at your own risk. use .flatten instead.",
            "itemtype": "method",
            "name": "extendsChilds",
            "params": [
                {
                    "name": "entry",
                    "description": "from where seeking after backgrounds properties",
                    "type": "DeepEntry"
                }
            ],
            "return": {
                "description": "this",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 1206,
            "description": "will perform the backgrounds application FIRSTLY and FULLY (full recursive) on current entries before appying extendsChild.\n\n\tnot intend to be call directly by programmer. use at your own risk.  use .flatten instead.",
            "itemtype": "method",
            "name": "extendsBackgrounds",
            "params": [
                {
                    "name": "entry",
                    "description": "from where seeking after backgrounds properties",
                    "type": "DeepEntry"
                }
            ],
            "return": {
                "description": "this",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 1260,
            "description": "will perform FULL backgrounds application on chain entries. (see backgrounds documentation)\n\nasynch\nSuccess injected : entries values\nErrors injected : any flatten error",
            "itemtype": "method",
            "name": "flatten",
            "return": {
                "description": "this",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 1319,
            "description": "transform : loop on entries, apply 'func' with 'args' on each entry : replace entries values with func result\nfunction could return promise.\n\n- loop on entries : true\n- chainable : true\n- transparent : false\n- promised management : true\n- success injected : the array of results of each call on func\n- error injected : any error returned (or produced) from a func call",
            "itemtype": "method",
            "name": "transform",
            "params": [
                {
                    "name": "func",
                    "description": "any function that need to be apply on each chain entry",
                    "type": "Function"
                },
                {
                    "name": "args",
                    "description": "the arguments to pass to 'func'",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the current chain handler (this)",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 1363,
            "description": "run : loop on entries, apply 'func' with 'args' on each entry (entry become 'this' of func)\nfunction could retrun promise.\n\n- loop on entries : true\n- chainable : true\n- transparent : false\n- promised management : true\n- success injected : the array of results of each call on func\n- error injected : any error returned (or produced) from a func call",
            "itemtype": "method",
            "name": "run",
            "params": [
                {
                    "name": "func",
                    "description": "any function that need to be apply on each chain entry",
                    "type": "Function"
                },
                {
                    "name": "args",
                    "description": "the arguments to pass to 'func'",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the current chain handler (this)",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 1417,
            "description": "exec :  call 'func' with 'args' (the 'this' of the function isn't modified)\nfunction could retruen promise.\n\n- loop on entries : false\n- chainable : true\n- transparent : false\n- promised management : true\n- success injected : the result of the call on func\n- error injected : any error returned (or produced) from func call",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "func",
                    "description": "any function that need to be apply on each chain entry",
                    "type": "Function"
                },
                {
                    "name": "args",
                    "description": "the arguments to pass to 'func'",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the current chain handler (this)",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 1455,
            "description": "apply a 'treatments' on chain entries (each entry will be the context of the treatment). (renderables are treatments - see doc and example).\n\na treaments is an object that contains : {\n  what : (optional) object|retrievable_string a value to inject in 'how' function. if no 'what' is provided : inject the entry (the context) in 'how'\n\t how : a function to treat 'what' (simple function that have a single argument (what) and return its result),\n\t where: (optional) a function to send the results somewhere, return the descriptor of the sended ressource (see deep-ui : dom.apendTo for example),\n\t done : a callback function that will be called on treated entry (the context of the done) when treatment succeed\n\t fail : a callback function that will be called on treated entry (the context of the fail) when treatment failed\n}\n\nif entry contain a 'treat' function : will be called and provided treatment will be passed as argument\n\nKeep previous entries (maybe modified by treatment)\n\nChain Success Injection : the treatments results\nChain Error Injection : the treatments errors",
            "itemtype": "method",
            "name": "treat",
            "params": [
                {
                    "name": "treatment",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 1508,
            "description": "valuesEqual : test strict equality between the array of entries values and a provided array of value\n\n- loop on entries : false\n- chainable : true\n- transparent : false\n- promised management : true (on callBack)\n- success injected : the result of the callBack or the report if callback returned nothing\n- error injected : the report or any error returned (or produced) from callBack\n\n\n\tChain Success injection : the valid report\n\tChain Error injection : the unvalid report",
            "itemtype": "method",
            "name": "valuesEqual",
            "params": [
                {
                    "name": "obj",
                    "description": "the object to test equality",
                    "type": "Object"
                },
                {
                    "name": "callBack",
                    "description": "optional : any callBack to manage the report. Could return a promise.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 1560,
            "description": "equal test strict equality on each entry value against provided object\n\n\tChain Success injection : the valid report\n\tChain Error injection : the unvalid report",
            "itemtype": "method",
            "name": "equal",
            "params": [
                {
                    "name": "obj",
                    "description": "the object to test",
                    "type": "*"
                },
                {
                    "name": "optional.",
                    "description": "callBack a callBack to manage report",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 1620,
            "description": "validate apply validation\n\n\tChain Success injection : the valid report\n\tChain Error injection : the unvalid report",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "options",
                    "description": "[description]",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 1677,
            "description": "log any provided arguments.\n If no arguments provided : will log current success or error state.\n\n asynch\n transparent true",
            "itemtype": "method",
            "name": "log",
            "return": {
                "description": "this",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 1718,
            "description": "log current chain entries  with optional title\n\n full option means print full entry in place of just entry.value\n pretty option means print pretty json (indented)\nasynch\n transparent true",
            "itemtype": "method",
            "name": "logValues",
            "params": [
                {
                    "name": "title",
                    "description": "(optional) the title you want"
                },
                {
                    "name": "options",
                    "description": "(optional) : an object",
                    "type": "Full:true|false, pretty:true|false"
                }
            ],
            "return": {
                "description": "this",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 1766,
            "description": "if no callBack is present : just return the FIRST value of entries. It's a chain end handle.\n If callback is provided : the FIRST entry  value will be passed as argument to callback.\n \t\tand so th chain could continue : the return of this handle is the deep handler.\ntransparent true",
            "itemtype": "method",
            "name": "val",
            "params": [
                {
                    "name": "callBack",
                    "description": ""
                }
            ],
            "return": {
                "description": "this or val",
                "type": "Deephandler|entry.value"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 1803,
            "description": "will passe as argument each entries to callback.\n callback could return promise. the chain will wait any promise before continuing.\n\n\n\tChain Success injection : the results of callback calls (resolved if promises)\n\tChain Error injection : the errors of callback calls (rejected if promises)",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "callBack",
                    "description": ""
                }
            ],
            "return": {
                "description": "this",
                "type": "Deephandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 1837,
            "description": "if no callBack is present : just return the array of values of entries. It's a chain end handle.\n If callback is provided : the entries values will be passed as argument to callback.\n \t\tand so th chain could continue : the return of this handle is the deep handler.\ntransparent true",
            "itemtype": "method",
            "name": "values",
            "params": [
                {
                    "name": "callBack",
                    "description": ""
                }
            ],
            "return": {
                "description": "this or values",
                "type": "Deephandler|Array"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 1875,
            "description": "if no callBack is present : just return the array of entries. It's a chain end handle.\n If callback is provided : the entries will be passed as argument to callback.\n \t\tand so th chain could continue : the return of this handle is the deep handler.\n \n transparent true",
            "itemtype": "method",
            "name": "nodes",
            "params": [
                {
                    "name": "callBack",
                    "description": ""
                }
            ],
            "return": {
                "description": "this or entries",
                "type": "Deephandler|Array"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 1910,
            "description": "if no callBack is present : just return the array of paths of entries. It's a chain end handle.\n If callback is provided : the entries paths will be passed as argument to callback.\n \t\tand so th chain could continue : the return of this handle is the deep handler.\ntransparent true",
            "itemtype": "method",
            "name": "paths",
            "params": [
                {
                    "name": "callBack",
                    "description": ""
                }
            ],
            "return": {
                "description": "this or paths",
                "type": "Deephandler|Array"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 1947,
            "description": "if no callBack is present : just return the array of schemas of entries. It's a chain end handle.\n If callback is provided : the entries schemas will be passed as argument to callback.\n \t\tand so th chain could continue : the return of this handle is the deep handler.\n \n transparent true",
            "itemtype": "method",
            "name": "schemas",
            "params": [
                {
                    "name": "callBack",
                    "description": ""
                }
            ],
            "return": {
                "description": "this or schemas",
                "type": "Deephandler|Array"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 1986,
            "description": "will wait xxxx ms before contiuing chain\n\ntransparent true",
            "itemtype": "method",
            "name": "delay",
            "params": [
                {
                    "name": "ms",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "this",
                "type": "Deephandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 2015,
            "description": "will seek in entries after any retrievable string OR executable functions : and will replace references by loaded/returned content.\n\nif context is provided : will try to 'interpret' (see .interpret) strings before retrieving them.\n\nChain Success injection : array of loaded results",
            "itemtype": "method",
            "name": "deepLoad",
            "params": [
                {
                    "name": "context",
                    "description": "(optional) a context to interpret strings before retrieving",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 2074,
            "description": "if request is provided : \n \t\ttry to retrieve 'request' and replace entries values by loaded result\n \telse\n \t\twill try to retrieve any entry.value strings (will not seek deeply) and replace associated entries values by loaded result.\n \t\tOR if entry.value is an object : look if there is any .load() function in it. If so : fire it.\n \n if context is provided : will try to 'interpret' (see .interpret) strings before retrieving them.\n \t(on request or entries values)\nChain success injection : array of loaded content.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "(optional)",
                    "description": "request",
                    "type": "String"
                },
                {
                    "name": "(optional)",
                    "description": "context the context to interpret strings",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 2176,
            "description": "seek after any strings and try to interpret it with current context.\nsee interpretation for simple case",
            "itemtype": "method",
            "name": "deepInterpret",
            "params": [
                {
                    "name": "context",
                    "description": "the oebjct to inject in strings",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 2220,
            "description": "will interpret entries values with context\nexample : \n\t deep(\"hello { name }\").interpret({ name:\"john\" }).val();\n  will provide \"hello john\".",
            "itemtype": "method",
            "name": "interpret",
            "params": [
                {
                    "name": "context",
                    "description": "the context to inject in strings",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "deep.js",
            "line": 2411,
            "description": "It's the way of performing a SQL JOIN like between two objects.\nObjects could be retrievables.\n\ntake current entries, seek after localKeys, use it to get 'what' with foreignKey=localKey, and finnaly store result at 'whereToStore' path in current entries values.",
            "itemtype": "method",
            "name": "mapOn",
            "params": [
                {
                    "name": "what",
                    "description": "",
                    "type": "Collection|retrievable_string"
                },
                {
                    "name": "localKey",
                    "description": "the name of the localKey to match with Collection items",
                    "type": "String"
                },
                {
                    "name": "foreignKey",
                    "description": "the name of the foreignKey to match with current entries",
                    "type": "String"
                },
                {
                    "name": "whereToStore",
                    "description": "the path where save map result in each entries",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this",
                "type": "DeepHandler"
            },
            "class": "DeepHandler",
            "module": "deep"
        },
        {
            "file": "promise.js",
            "line": 1,
            "author": "Gilles Coomans <gilles.coomans@gmail.com>",
            "class": "",
            "module": "deep"
        },
        {
            "file": "promise.js",
            "line": 4,
            "description": "Wrapper of promises : jquery promise for browser side,  and promised-io on ssjs (tested on nodejs).",
            "class": "",
            "module": "deep"
        },
        {
            "file": "utils.js",
            "line": 1,
            "author": "Gilles Coomans <gilles.coomans@gmail.com>",
            "class": "",
            "module": "deep"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type",
            "line": " testcases/app.js:1"
        },
        {
            "message": "Missing item type",
            "line": " deep-collider.js:1"
        },
        {
            "message": "Missing item type",
            "line": " deep-compose.js:1"
        },
        {
            "message": "Missing item type",
            "line": " deep-query.js:1"
        },
        {
            "message": "Missing item type",
            "line": " deep-request.js:1"
        },
        {
            "message": "Missing item type\nTODO : DeepRequest.late.post(...) : return function which will do post later\n\ncrossDomainXML : add options with proxy or YQL\n\nmaintain cache for each reload seqquence : if in the same load bunch there is sam paths : use cache in place of retreieve multiple time the same file\n\nprotocole to add : \n\ndata-model::\nfs::\n\n\n\n\nprotocoles :\n\nextensions : \n\nparsers : \n\nresponseParser\n\tread reponse.headers.contentType : \n\t\nvar jqueryRequest = function(info, options){\n\toptions = options || {};\n\tvar headers = options.headers || {};\n\tutils.up(this.requestHeaders, headers);\n\tvar self = this;\n\treturn promise.when($.ajax({\n\t\tbeforeSend :function(req) {\n\t\t\twriteJQueryHeaders(req, headers);\n\t\t},\n\t\turl:info.uri, \n\t\tmethod:\"GET\", \n\t\tdata:null,\n\t\tdatatype:self.options.datatype || \"json\"\n\t})\n\t.done(function (  data, msg, jqXHR ) {\n\t\treturn self.parse(data, info, options);\n\t})\n\t.fail(function ( jqXHR ) {\n\t\treturn new Error(\"DeepRequest.load failed : \"+JSON.stringify(info));\n\t}))\n}\nvar setHeaders = function (req) {\n\t\n}\n\nvar deepAction = {\n\t\"dom.appendTo\" : { // dom.appendTo::#id\n\t\taction:function (info, datas) {\n\t\t\t// body...\n\t\t}\n\t}\n}\n\nvar vc = {\n\tplaceInDOM:deep.action(\"dom.appendTo::#id\")\n}\nvar dr = {\n\tlexic:{\n\t\tjson:{\n\t\t\toptions:{\n\t\t\t\tqueriable:true,\n\t\t\t\tdatatype:\"json\"\n\t\t\t},\n\t\t\trequestHeaders:{\n\t\t\t\t\"accept\":\"application/json;charset=utf-8\"\n\t\t\t},\n\t\t\tresponseHeaders:{\n\t\t\t\t\"content-type\":\"application/json;charset=utf-8\"\n\t\t\t},\n\t\t\taction:baseRequest,\n\t\t\tparse:function(response, infos, options) {\n\t\t\t\t// body...\n\t\t\t}\n\t\t},\n\t\thtml:{\n\t\t\toptions:{\n\t\t\t\tqueriable:false,\n\t\t\t\tdatatype:\"html\"\n\t\t\t},\n\t\t\trequestHeaders:{\n\t\t\t\t\"accept\":\"text/html;charset=utf-8\"\n\t\t\t},\n\t\t\tresponseHeaders:{\n\t\t\t\t\"content-type\":\"text/html;charset=utf-8\"\n\t\t\t},\n\t\t\taction:baseRequest,\n\t\t\tparse:function(response, infos, options) {\n\t\t\t\t// body...\n\t\t\t}\n\t\t}\n\t},\n\tget:function (info, options) {\n\t\tif(typeof info === 'string')\n\t\t\tinfo = this.parse(info);\n\t\tvar handler = this.lexic[info.protocole];\n\t\tif(!handler)\n\t\t\tthrow new Error(\"DeepRequest : no handler found with : \",info); \n\t\treturn handler.action(info, options);\n\t}\n\tall\n\t_______\n\n\tjson\n\txml\n\trss\n\ttext\n\thtml\n\n}",
            "line": " deep-request.js:5"
        },
        {
            "message": "Missing item type\nselect login controller : give controller chain",
            "line": " deep-restart.js:352"
        },
        {
            "message": "Missing item type\nPermit to manipulate server store through restful IO...",
            "line": " deep-restart.js:388"
        },
        {
            "message": "Missing item type\nDo post on login services.\n\t\tIf arg is provided : post arg as login object.\n\t\tIf no args : use from ui if possible",
            "line": " deep-restart.js:395"
        },
        {
            "message": "Missing item type\nget object from store",
            "line": " deep-restart.js:406"
        },
        {
            "message": "Missing item type\nTODO : \nadd distinct(testPropertyPath)\nadd merge()\nadd backgrounds()  :  do object extension with deep-extender + schema\n\n\n\nadd _ancestor (any ancestor)\nadd _brothers  (any brothers)\n\n! TEST ALL operations !",
            "line": " deep-rql.js:14"
        },
        {
            "message": "Missing item type",
            "line": " deep-schema.js:1"
        },
        {
            "message": "Missing item type\nTODO : \njson-pointer dereferencement\t\t\t\t\t\t\tOK\nadd relative reference to json-pointer\t\t\t\t\tOK\ndependencies : clarify, and/or implement if(constraint.match(root)) constraint(value)\nlinks dereferencer  : template-engine + instance injection + DeepRequest.retrieve\nréférencement interne : backgrounds ou $ref with json-pointer\t\t\t\t\tOK\n\n\n\nPatterns :\n\t- name patterns + data : regExp, enum, direct       (could be external)\n\t- query pattern : if query then pattern match\n\n\tproperties:{\n\t\tchristophil:{\n\t\t\tdependenciesQueries:\n\t\t\t{\n\t\t\t\tmatchEurope:{     // it's the relation/dependency name\n\t\t\t\t\tquery:\"\",\n\t\t\t\t\trequired:true,   // mean that the query MUST give something : so the dependency MUST be valid\n\t\t\t\t\tpatternProperties:{\n\t\t\t\t\t\t\"$ref\":[ \"json::/Pathologies/?type=perenial&zone=europe&$result=hash\" ]  // exemple of external patterns definitions\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmatchUK:{\n\t\t\t\t\tquery:\"\";\n\t\t\t\t\trequired:false,  // optional dependency\n\t\t\t\t\tproperties:{\n\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\nproperty name + data pattern : could be an external link to a service that provides a list of acceptable values.\nImagine you would define a pathologie list for plants. Each plant could be sensible to a subset of those pathologies, and could have different kinds of sensibility...\nThe service could provids the list of known pathologies, and the subset have to match",
            "line": " deep-schema.js:206"
        },
        {
            "message": "Missing item type\nconsole.flags : {\n\tvalidationError,\n\tvalidator\n}",
            "line": " deep-schema.js:251"
        },
        {
            "message": "Missing item type",
            "line": " deep.js:2"
        },
        {
            "message": "Missing item type",
            "line": " promise.js:1"
        },
        {
            "message": "Missing item type\nWrapper of promises : jquery promise for browser side,  and promised-io on ssjs (tested on nodejs).",
            "line": " promise.js:4"
        },
        {
            "message": "Missing item type",
            "line": " utils.js:1"
        }
    ]
}